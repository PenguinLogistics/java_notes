 当前问题：代码块？abstract？interface？堆的结构？常量池？静态域？MVC？


面向对象：

概览
1.java类及类的成员：属性、方法、构造器；代码块、内部类

2.面向对象的三大特征：封装性、继承性、多态性

3.其他关键字：this、super、static、final、abstract、interface、package、import


如何理解面向对象（万事万物皆对象）

1.在java语言范畴中，我们都将结构、功能等封装到类中。通过类的实例化，来调用具体的结构、功能。

2.涉及java语言与前端html、后端数据库交互时，前后端的结构在java层面交互时，都体现为类、对象。

二、三大特征

1.封装性（通过权限修饰符）

1）要求：高内聚，低耦合
高内聚：类的内部数据操作细节自己完成，不允许外部干涉
低耦合：仅对外暴露少量的方法用于使用

隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的来说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。

2）权限修饰符
public		同一类中	同一包中	不同包的子类	不同包中的无关类
protected	同一类中	同一包中	不同包的子类
default		同一类中	同一包中
private		同一类中

权限修饰符可以用来修饰类及类的内部结构：属性、方法、构造器、内部类
	修饰类只能使用 public、default
	
四种权限修饰符体现类及类的内部结构在被调用时的可见性的大小。

3）封装性的体现
	1.将类的属性私有化，同时，提供公共的方法来获取和设置此属性的值
	
	2.不对外暴露私有的方法
	
	3.单例模式（将构造器私有化）
	
	4.如果不希望类在包外被调用，可以将类设置为default
	
4）this
this调用属性、方法

this调用构造器。例：

public class Main{

    public static void main(String args[]){
        Node root = new Node(1);
        System.out.println(root.val);// 1
        System.out.println(root.left);// null
        System.out.println(root.right);// null
    }
}

class Node{
    int val;
    Node left;
    Node right;
    public Node(int val, Node left, Node right){
        this.val = val;
        this.left = left;
        this.right = right;
    }
    public Node(int val){
        this(val, null,null);
    }
}

2.继承性

1）继承性的好处
①减少的代码冗余
②便于功能扩展
③为多态性的使用提供了前提

2）继承性的格式
class A extends B{}

可以用super调用父类的属性和方法
调用构造器super()

示例：
class Node{
    int val;
    Node left;
    Node right;
    public Node(int val, Node left, Node right){
        this.val = val;
        this.left = left;
        this.right = right;
    }
    public Node(int val){
        this(val, null,null);
    }
}

class TreeNode extends Node{
    int idx;
    public TreeNode(int val, Node left, Node right, int idx){
        super(val, left, right);
        this.idx = idx;
    }
}

体现：
	1.一旦子类A继承父类B以后，子类A就获得了父类B中生命的【所有】属性和方法 //包括private 但是访问权限还是private
	
	存疑？子类不能继承父类的private 
      	A subclass does not inherit the private members of its parent class. However, if the superclass has public or protected methods for accessing its private fields, these can also be used by the subclass. "
      	A nested class has access to all the private members of its enclosing class—both fields and methods. Therefore, a public or protected nested class inherited by a subclass has indirect access to all of the private members of the superclass.
	详细链接：https://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html
	
	①官方文档显示子类不能继承到父类的属性和方法。
	②在内存上，子类调用父类的构造器，因此子类中存在父类的属性和方法，但是不能访问。
	
	2.子类继承了父类以后，还可以声明自己特有的属性和方法，实现功能的拓展

3）super关键字的使用
super表示父类的，可以调用 属性 方法 构造器

①在子类的方法和构造器中，通过使用 super.属性 或 super.方法 显式的调用父类中声明的属性和方法。但通常情况系，习惯省略super.

②子类和父类定义了同名的属性，若想要在子类中调用父类中声明的属性，则必须显式的使用super. 的方式

③子类重写了父类中的方法以后，若想要在子类中调用父类中被重写的方法，则必须显式的使用super. 的方式

调用构造器语法：
	super(形参列表) 必须在子类构造器首行

	this() 和 super()不能同时出现

	构造器首行若没有显式的声明 this()或super()则默认调用父类中空参的构造器

	在类的多个构造器中，至少有一个使用了super()调用父类中的构造器



3.（对象的）多态性：

1）多态是：父类的引用指向子类的对象（如List<String> l = new ArrayList<>();）

2）（多态的使用）虚拟方法调用：
	有了对象的多态性以后，我们在编译期只能调用父类中声明的方法，但在运行期，实际执行的是子类重写父类的方法
	
	定义：子类中定义了与父类同名同参的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给他的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。

3）多态的使用前提：
	①类的继承关系
	②方法的重写

4）对象的多态性，只适用于方法，不适用于属性。属性的编译和运行都看左边
	

方法的重写（override）

	1.重写：子类继承父类以后，可以对父类中同名同参数的方法，进行覆盖操作

	2.应用：重写以后，当子类创建对象以后，通过子类对象调用子父类中同名同参数方法时，实际执行的是子类重写父类的方法

	语法
	1.必须同名同参数
	2.不能降低可见性，可见性要大于等于父类中被重写方法
	3.子类中不能重写父类中的private方法（其实可以写但是不是重写，而是定义子类自己的方法）
	4.返回值类型：
		①父类被重写的方法的返回值是void，则子类重写方法的返回值只能是void
		②父类被重写的方法的返回值是A类，则子类重写方法的返回值可以使A类或A类的子类
		③父类被重写的方法的返回值是基本数据类型，则子类重写方法的返回值数据类型必须相同
	5.子类重写的方法抛出的异常类型（如父类异常的子类）不大于父类被重写方法抛出的异常类型


三、JVM内存结构

虚拟机栈：我们将局部变量储存到栈结构中

堆：我们new出来的结构（比如 数组、对象）加载在堆空间中。补充：对象的属性（非static的）加载在堆空间中

方法区：类的加载信息、常量池、静态域


======================================================================================================

static 关键字的使用

1.static可以修饰 属性 方法 代码块 内部类

2.用static修饰属性：静态变量（类变量）

	多个对象共享同一个静态变量。当通过某个对象修改静态变量时，会导致其他对象调用此变量是修改过的。
	
	说明：
		①静态变量随着类的加载而加载，可以通过 类名.静态变量 的方式调用（类不能调用实例变量）
		②静态变量的加载早于对象的创建
		③由于类只会加载一次，则静态变量在内存中也只存在一份，存放在方法区的静态域
		

	举例：System.out Math.PI

3.用static修饰方法：静态方法
1）随着类的加载而加载
2）类不可以调用非静态方法
3）静态方法中，只能调用静态方法和属性。（不能调用非静态）
	JVM中 类 和 对象 生命周期

4）在静态方法中，不能使用this关键字、super关键字

4.何时使用static
1）属性被多个对象共享，不会随着对象不同而不同
2）操作静态属性的方法，一般设置为static的
3）工具类中的方法，习惯上声明为静态的。比如Math、Arrays、Collections





abstract 关键字 
	可以用来修饰 类、方法

抽象类
	
1）不能实例化
2）抽象类中一定有构造器、便于子类实例化
3）开发中都会提供抽象类的子类，让子类完成实例化，完成相关操作

抽象方法

1）只有方法声明，没有方法体
2）包含抽象方法的类，一定是抽象类。抽象类可以没有抽象方法
3）若子类重写了父类所有的抽象方法后，此子类才可以实例化。若子类没有重写所有父类的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰

注意：
1）不能用来修饰 属性 构造器 等结构
2）abstract不能用来修饰 私有方法 静态方法 final的方法 final的类


Interface 关键字

1.接口使用interface来定义。
	java不支持多继承性，有了接口，就可以得到多重继承的效果
	接口就是规范，定义的是一组规则。 继承是一个“是不是”的关系，二接口实现则是“能不能”的关系
	接口的本质是契约，标准，规范。

2.java中，接口和类是并列的两个结构

3.定义接口：定义接口中的成员
	JDK 7 及以前：只能定义全局常亮和抽象方法
		全局 《常量》 ：public static final 的 （可以省略 但依然是默认值）
		抽象方法：public abstract 的 （可以省略 但依然是默认值）
	JDK 8：除了以上还可以定义静态方法 默认方法

4.接口中不能定义构造器！接口不可以实例化

5.java开发中，接口通过让类实现（implements）的方式来使用
	
	若果实现接口的类实现了接口中所有的抽象方法，则此实现类可以实例化
	若没有实现接口中所有的抽象方法，则此实现类仍是一个抽象类

6.java类可以实现多个接口----> 弥补了java单继承性的局限性
	格式：class AA extends BB implements CC,DD

7.接口与接口直剑可以继承，而且可以多继承
	interface AA extends BB,CC

8.接口的具体使用，体现多态性

9.接口，实际上可以看做是一种规范

接口的应用:

1.代理模式

2.工厂模式
	简单工厂模式
	工厂方法模式
	抽象工厂模式

































































