 当前问题：代码块？abstract？interface？堆的结构？常量池？静态域？MVC？


面向对象：

概览
1.java类及类的成员：属性、方法、构造器；代码块、内部类

2.面向对象的三大特征：封装性、继承性、多态性

3.其他关键字：this、super、static、final、abstract、interface、package、import


如何理解面向对象（万事万物皆对象）

1.在java语言范畴中，我们都将结构、功能等封装到类中。通过类的实例化，来调用具体的结构、功能。

2.涉及java语言与前端html、后端数据库交互时，前后端的结构在java层面交互时，都体现为类、对象。

二、三大特征

1.封装性（通过权限修饰符）

1）要求：高内聚，低耦合
高内聚：类的内部数据操作细节自己完成，不允许外部干涉
低耦合：仅对外暴露少量的方法用于使用

隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的来说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。

2）权限修饰符
public		同一类中	同一包中	不同包的子类	不同包中的无关类
protected	同一类中	同一包中	不同包的子类
default		同一类中	同一包中
private		同一类中

权限修饰符可以用来修饰类及类的内部结构：属性、方法、构造器、内部类
	修饰类只能使用 public、default
	
四种权限修饰符体现类及类的内部结构在被调用时的可见性的大小。

3）封装性的体现
	1.将类的属性私有化，同时，提供公共的方法来获取和设置此属性的值
	
	2.不对外暴露私有的方法
	
	3.单例模式（将构造器私有化）
	
	4.如果不希望类在包外被调用，可以将类设置为default
	
4）this
this调用属性、方法

this调用构造器。例：

public class Main{

    public static void main(String args[]){
        Node root = new Node(1);
        System.out.println(root.val);// 1
        System.out.println(root.left);// null
        System.out.println(root.right);// null
    }
}

class Node{
    int val;
    Node left;
    Node right;
    public Node(int val, Node left, Node right){
        this.val = val;
        this.left = left;
        this.right = right;
    }
    public Node(int val){
        this(val, null,null);
    }
}

2.继承性

1）继承性的好处
①减少的代码冗余
②便于功能扩展
③为多态性的使用提供了前提

2）继承性的格式
class A extends B{}

可以用super调用父类的属性和方法
调用构造器super()

示例：
class Node{
    int val;
    Node left;
    Node right;
    public Node(int val, Node left, Node right){
        this.val = val;
        this.left = left;
        this.right = right;
    }
    public Node(int val){
        this(val, null,null);
    }
}

class TreeNode extends Node{
    int idx;
    public TreeNode(int val, Node left, Node right, int idx){
        super(val, left, right);
        this.idx = idx;
    }
}

体现：
	1.一旦子类A继承父类B以后，子类A就获得了父类B中生命的【所有】属性和方法 //包括private 但是访问权限还是private
	2.子类继承了父类以后，还可以声明自己特有的属性和方法，实现功能的拓展




3.多态性

方法的重写


三、JVM内存结构

虚拟机栈：我们将局部变量储存到栈结构中

堆：我们new出来的结构（比如 数组、对象）加载在堆空间中。补充：对象的属性（非static的）加载在堆空间中

方法区：类的加载信息、常量池、静态域



































